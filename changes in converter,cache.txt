
****************CACHE MANAGER WITHOUT NOTIFICATION PART******************


package BACKENDBussinessLogic;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import DBDataTransferInterface.DBInterface;
import SQLDatabase.Implementation;
import org.json.JSONObject;
import org.json.JSONArray;
import TextDatabase.WeatherDataFileManager;
import java.math.BigDecimal;


public class CacheManager {
    private WeatherAPIHandler apiStonks;
    private WeatherData cachedWeatherData;
    private AirPollutionData cachedAirPollutionData;
    private List<WeatherForecastData> cachedForecastDataList;
    private DBDataTransferInterface.DBInterface.DataAccessInterface dbInterface;
    
  
  //This is foR DB Module
// public CacheManager(double latitude, double longitude, Connection conn) 
//    {
//        this.apiStonks = new WeatherAPIHandler("70483fff196e58ca9a25fa29076f0f1e");
//        this.dbInterface = new Implementation.DataAccessImpl(conn);
//        String cityName = null;
//       
//        
//        if (dbInterface.isWeatherDataExists(longitude, latitude)) 
//        {
//            JSONObject jsonWeatherData = dbInterface.retrieveCurrentWeatherData(latitude, longitude);
//            cachedWeatherData = new JSONConverter().convertToWeatherData(jsonWeatherData);
//            cityName= cachedWeatherData.getCityName();
//            System.out.println("HEYY I CALLED DB!! WEATHER DATA!!!");
//        } 
//        else 
//        {
//           cachedWeatherData = apiStonks.getCurrentWeather(latitude, longitude);
//           cityName= cachedWeatherData.getCityName();
//           dbInterface.storeCurrentWeatherDataFromJson(new JSONExporter().convertToJSONWeatherData(cachedWeatherData), cityName,longitude,latitude);
//            System.out.println("HEYY I CALLED API!! WEATHER DATA!!!");
//        }
//        
//        if (dbInterface.isAirPollutionDataExists(longitude, latitude)) 
//        {
//            JSONObject jsonAirPollutionData = dbInterface.retrieveAirPollutionData(latitude, longitude);
//            cachedAirPollutionData = new JSONConverter().convertToAirPollutionData(jsonAirPollutionData);
//             System.out.println("HEYY I CALLED DB!! APD!!!");
//        } 
//        else 
//        {
//            cachedAirPollutionData = apiStonks.getAirPollutionData(latitude, longitude);
//            dbInterface.storeAirPollutionDataFromJson(new JSONExporter().convertToJSONAirPollutionData(cachedAirPollutionData), cityName, longitude, latitude);
//             System.out.println("HEYY I CALLED API!! APD!!!");
//        }
//        
//        if (dbInterface.isForcastDataExists(longitude, latitude)) 
//        {
//            JSONArray jsonForecastDataList = dbInterface.retrieveForecastData(latitude, longitude);
//            cachedForecastDataList = new JSONConverter().convertToForecastDataList(jsonForecastDataList);
//             System.out.println("HEYY I CALLED DB!! FORCAST DATA!!!");
//        } 
//        else 
//        {
//            cachedForecastDataList = apiStonks.getWeatherForecast(latitude, longitude);
//            dbInterface.storeForecastDataFromJson(new JSONExporter().convertToJSONForecastData(cachedForecastDataList), cityName, longitude, latitude);
//             System.out.println("HEYY I CALLED API!! FORCAST DATA!!!");
//        }
//        
//       
//
//    }

   
    
   

    public CacheManager(double latitude, double longitude, Connection conn) 
    {
        
        this.apiStonks = new WeatherAPIHandler("70483fff196e58ca9a25fa29076f0f1e");
        //this.dbInterface = new WeatherDataFileManager();
         this.dbInterface = new Implementation.DataAccessImpl(conn);
 
        String cityName = null;
    
        if (dbInterface.isWeatherDataExists(latitude,longitude)) 
        {
            JSONObject jsonWeatherData = dbInterface.retrieveCurrentWeatherData(latitude, longitude);
            jsonWeatherData.remove("Longitude");
            jsonWeatherData.remove("Latitude");
            System.out.println(jsonWeatherData.toString());
            System.out.println("GGG BHAIII!!!");
            cachedWeatherData = new JSONConverter().convertToWeatherData(jsonWeatherData);
            cityName= cachedWeatherData.getCityName();
            System.out.println("HEYY I CALLED DB!! WEATHER DATA!!!");
        } 
        else 
        {
           cachedWeatherData = apiStonks.getCurrentWeather(latitude, longitude);
           cityName= cachedWeatherData.getCityName();
           dbInterface.storeCurrentWeatherDataFromJson(new JSONExporter().convertToJSONWeatherData(cachedWeatherData), cityName,longitude,latitude);
            System.out.println("HEYY I CALLED API!! WEATHER DATA!!!");
        }
        
            
       if (dbInterface.isAirPollutionDataExists(latitude, longitude)) {
    JSONObject jsonAirPollutionData = dbInterface.retrieveAirPollutionData(latitude, longitude);
    jsonAirPollutionData.remove("Longitude");
    jsonAirPollutionData.remove("Latitude");
    cachedAirPollutionData = new JSONConverter().convertToAirPollutionData(jsonAirPollutionData);
    System.out.println("HEYY I CALLED DB!! APD!!!");
} else {
    cachedAirPollutionData = apiStonks.getAirPollutionData(latitude, longitude);
    dbInterface.storeAirPollutionDataFromJson(new JSONExporter().convertToJSONAirPollutionData(cachedAirPollutionData), cityName, longitude, latitude);
    System.out.println("HEYY I CALLED API!! APD!!!");
    System.out.println("LongitudeCame: "+longitude+" Latitude Came"+ latitude);
        
    
}

        
        if (dbInterface.isForcastDataExists( latitude,longitude) )
        {
            JSONArray jsonForecastDataList = dbInterface.retrieveForecastData(latitude, longitude);
            
            cachedForecastDataList = new JSONConverter().convertToForecastDataList(jsonForecastDataList);
             System.out.println("HEYY I CALLED DB!! FORCAST DATA!!!");
        } 
        else 
        {
            cachedForecastDataList = apiStonks.getWeatherForecast(latitude, longitude);
            dbInterface.storeForecastDataFromJson(new JSONExporter().convertToJSONForecastData(cachedForecastDataList), cityName, longitude, latitude);
             System.out.println("HEYY I CALLED API!! FORCAST DATA!!!");
        }

    }
     public WeatherData getCachedWeatherData() {
        return cachedWeatherData;
    }

    public AirPollutionData getCachedAirPollutionData() {
        return cachedAirPollutionData;
    }

    public List<WeatherForecastData> getCachedForecastDataList() {
        return cachedForecastDataList;
    }

  
}

******************JSON CONVERTER*********************

package BACKENDBussinessLogic;
  
import org.json.JSONObject;
import org.json.JSONArray;

import java.util.ArrayList;
import java.util.List;

public class JSONConverter {

   

  public WeatherData convertToWeatherData(JSONObject jsonWeatherData) {
    String cityName = jsonWeatherData.getString("cityName");
    double currentTemp = jsonWeatherData.getDouble("currentTemp");
    double maxTemp = jsonWeatherData.getDouble("maxTemp");
    double minTemp = jsonWeatherData.getDouble("minTemp");
    double feelsLike = jsonWeatherData.getDouble("feelsLike");
    int humidity = jsonWeatherData.getInt("humidity");
    String sunrise = jsonWeatherData.getString("sunrise");
    String sunset = jsonWeatherData.getString("sunset");
    
    return new WeatherData(feelsLike, currentTemp, minTemp, maxTemp, humidity, sunrise, sunset, cityName);
}


   public AirPollutionData convertToAirPollutionData(JSONObject jsonAirPollutionData) {
    int aqi = jsonAirPollutionData.getInt("aqi");
    String timestamp = jsonAirPollutionData.getString("timestamp");
    double co = jsonAirPollutionData.getDouble("co");
    double nh3 = jsonAirPollutionData.getDouble("nh3");
    double no = jsonAirPollutionData.getDouble("no");
    double no2 = jsonAirPollutionData.getDouble("no2");
    double so2 = jsonAirPollutionData.getDouble("so2");

    return new AirPollutionData(aqi, co, no, no2, so2, nh3, timestamp);
}


    public List<WeatherForecastData> convertToForecastDataList(JSONArray jsonForecastDataList) {
    List<WeatherForecastData> forecastDataList = new ArrayList<>();
    for (Object obj : jsonForecastDataList) {
        JSONObject jsonForecastData = (JSONObject) obj;
        
        String date = jsonForecastData.getString("date");
        double minTemp = jsonForecastData.getDouble("minTemp");
        double maxTemp = jsonForecastData.getDouble("maxTemp");
        int humidity = jsonForecastData.getInt("humidity");
        String description = jsonForecastData.getString("description");
        
        WeatherForecastData forecastData = new WeatherForecastData(date, minTemp, maxTemp, humidity, description);
        forecastDataList.add(forecastData);
    }
    return forecastDataList;
}

}



