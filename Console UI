/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package weatherapplication;

/**
 *
 * @author HP
 */
import java.util.InputMismatchException;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class WeatherApp {
    // Scanner for user input
    private static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        // Ask the user for input preference
        int inputChoice = getLocationInputChoice();
        
        // Get the location based on the user's choice
        String location = (inputChoice == 1) ? getLocationByCity() : getLocationByCoordinates();
        
        // Clear the screen
        clearScreen();
        
        // Display menu options after obtaining location
        displayMenu(location);
    }
    
   private static int getLocationInputChoice() {
    while (true) {
        try {
            System.out.println("How do you want to input the location?");
            System.out.println("1. By city name");
            System.out.println("2. By longitude/latitude");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            if (choice != 1 && choice != 2) {
                throw new IllegalArgumentException("Invalid input. Please enter 1 or 2.");
            }
            return choice;
        } catch (InputMismatchException e) {
            // Clear the scanner buffer
            scanner.nextLine();
            System.out.println("Error: Invalid input. Please enter a valid integer.");
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

    
 private static String getLocationByCity() {
    clearScreen();
                scanner.nextLine(); // Consume newline character

    while (true) {
        try {
            System.out.print("Enter city name: ");
            String city = scanner.nextLine();
            if (city.isEmpty()) {
                throw new IllegalArgumentException("City name cannot be empty");
            } else if (city.matches(".*\\d.*")) {
                throw new IllegalArgumentException("City name cannot contain digits");
            }
            return city;
        } catch (IllegalArgumentException e) {
            // Handle empty or invalid city name
            System.out.println("Error: " + e.getMessage());
            System.out.println("Please enter a valid city name without digits.");
            System.out.println("Try again:");
        }
    }
}


    
   private static String getLocationByCoordinates() {
    clearScreen();
    double latitude = 0, longitude = 0;
    while (true) {
        try {
            System.out.print("Enter latitude: ");
            latitude = scanner.nextDouble();
            System.out.print("Enter longitude: ");
            longitude = scanner.nextDouble();
            break; // Break out of the loop if input is valid
        } catch (InputMismatchException e) {
            // Handle input mismatch exception
            System.out.println("Error: Invalid input. Please enter valid latitude and longitude values.");
            scanner.nextLine(); // Consume invalid input
        }
    }
    return "Latitude: " + latitude + ", Longitude: " + longitude;
}

    
    private static void displayMenu(String location) {
        while (true) {
            // Main menu options
            System.out.println("\nWeather App Main Menu for " + location + ":");
            System.out.println("1. Show current weather conditions");
            System.out.println("2. Show Air Pollution");
            System.out.println("3. Show weather forecast for 5 days");
            System.out.println("4. Exit");

            // User choice input
            System.out.print("Enter you1"
                    + "r choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    showCurrentWeatherConditions(location);
                    break;
                case 2:
                    ShowAirPollutionData(location);
                    break;
                
                case 3:
                    showWeatherForecast(location);
                    break;
                case 4:
                    // Exit the program
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

   public static void showCurrentWeatherConditions(String location) {
        // Get current date and time
        Date timestamp = new Date();
        
        // Sample weather data 
        double feelsLike = 25.6;
        double temperature = 26.8;
        double minTemp = 22.5;
        double maxTemp = 30.2;
        int humidity = 75;
        Date sunrise = new Date(); // Sample sunrise time
        Date sunset = new Date();  // Sample sunset time
        
        // Format sunrise and sunset times
        SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm:ss");
        String sunriseFormatted = timeFormat.format(sunrise);
        String sunsetFormatted = timeFormat.format(sunset);
        
        // Format temperature values
        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        String feelsLikeFormatted = decimalFormat.format(feelsLike);
        String temperatureFormatted = decimalFormat.format(temperature);
        String minTempFormatted = decimalFormat.format(minTemp);
        String maxTempFormatted = decimalFormat.format(maxTemp);
        
        //  weather information string
        String weatherInfo = "Current weather conditions for " + location + ":\n" +
                "Timestamp: " + timestamp + "\n" +
                "Feels Like: " + feelsLikeFormatted + "\n" +
                "Temperature: " + temperatureFormatted + "\n" +
                "Min Temperature: " + minTempFormatted + "\n" +
                "Max Temperature: " + maxTempFormatted + "\n" +
                "Humidity: " + humidity + "%\n" +
                "Sunrise: " + sunriseFormatted + "\n" +
                "Sunset: " + sunsetFormatted;
        
        // Print
        System.out.println(weatherInfo);
    }

    public static void ShowAirPollutionData(String location) {
        // Sample air pollution data 
        String timestamp = "2024-03-19 10:30:00";
        int aqi = 75;
        String co = "0.25";
        String no = "0.03";
        String no2 = "0.02";
        String so2 = "0.015";
        String nh3 = "0.01";

        // Printing
        System.out.println("Showing Air Pollution information for " + location + ":");
        System.out.println("Timestamp: " + timestamp);
        System.out.println("AQI: " + aqi);
        System.out.println("CO: " + co);
        System.out.println("NO: " + no);
        System.out.println("NO2: " + no2);
        System.out.println("SO2: " + so2);
        System.out.println("NH3: " + nh3);
    }

  

    public static void showWeatherForecast(String location) {
        // Hardcoded sample forecast data
        String[][] forecastData = {
            {"2024-03-19", "09:00:00", "25.6", "31.2"},
            {"2024-03-20", "09:00:00", "26.8", "32.5"},
            {"2024-03-21", "09:00:00", "27.3", "33.8"},
            {"2024-03-22", "09:00:00", "25.5", "30.9"},
            {"2024-03-23", "09:00:00", "24.9", "29.7"}
        };

        // Printing
        System.out.println("Showing weather forecast for 5 days for " + location + "...");
        for (String[] forecast : forecastData) {  //for each loop
            System.out.println("Date: " + forecast[0] + ", Time: " + forecast[1]);
            System.out.println("Min Temperature: " + forecast[2] + "°C");
            System.out.println("Max Temperature: " + forecast[3] + "°C");
            System.out.println();
        }
    }
    
private static void clearScreen() {
    for (int i = 0; i < 30; i++) {
        System.out.println();
    }
}

}
 




