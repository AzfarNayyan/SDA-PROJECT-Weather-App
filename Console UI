/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package weatherapplication;

/**
 *
 * @author HP
 */
import java.util.InputMismatchException;
import java.util.Scanner;

public class WeatherApp {
    // Scanner for user input
    private static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        // Ask the user for input preference
        int inputChoice = getLocationInputChoice();
        
        // Get the location based on the user's choice
        String location = (inputChoice == 1) ? getLocationByCity() : getLocationByCoordinates();
        
        // Clear the screen
        clearScreen();
        
        // Display menu options after obtaining location
        displayMenu(location);
    }
    
   private static int getLocationInputChoice() {
    while (true) {
        try {
            System.out.println("How do you want to input the location?");
            System.out.println("1. By city name");
            System.out.println("2. By longitude/latitude");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            if (choice != 1 && choice != 2) {
                throw new IllegalArgumentException("Invalid input. Please enter 1 or 2.");
            }
            return choice;
        } catch (InputMismatchException e) {
            // Clear the scanner buffer
            scanner.nextLine();
            System.out.println("Error: Invalid input. Please enter a valid integer.");
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

    
 private static String getLocationByCity() {
    clearScreen();
                scanner.nextLine(); // Consume newline character

    while (true) {
        try {
            System.out.print("Enter city name: ");
            String city = scanner.nextLine();
            if (city.isEmpty()) {
                throw new IllegalArgumentException("City name cannot be empty");
            } else if (city.matches(".*\\d.*")) {
                throw new IllegalArgumentException("City name cannot contain digits");
            }
            return city;
        } catch (IllegalArgumentException e) {
            // Handle empty or invalid city name
            System.out.println("Error: " + e.getMessage());
            System.out.println("Please enter a valid city name without digits.");
            System.out.println("Try again:");
        }
    }
}


    
   private static String getLocationByCoordinates() {
    clearScreen();
    double latitude = 0, longitude = 0;
    while (true) {
        try {
            System.out.print("Enter latitude: ");
            latitude = scanner.nextDouble();
            System.out.print("Enter longitude: ");
            longitude = scanner.nextDouble();
            break; // Break out of the loop if input is valid
        } catch (InputMismatchException e) {
            // Handle input mismatch exception
            System.out.println("Error: Invalid input. Please enter valid latitude and longitude values.");
            scanner.nextLine(); // Consume invalid input
        }
    }
    return "Latitude: " + latitude + ", Longitude: " + longitude;
}

    
    private static void displayMenu(String location) {
        while (true) {
            // Main menu options
            System.out.println("\nWeather App Main Menu for " + location + ":");
            System.out.println("1. Show current weather conditions");
            System.out.println("2. Show basic weather information");
            System.out.println("3. Show sunrise and sunset time");
            System.out.println("4. Show weather forecast for 5 days");
            System.out.println("5. Exit");

            // User choice input
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    showCurrentWeatherConditions(location);
                    break;
                case 2:
                    showBasicWeatherInfo(location);
                    break;
                case 3:
                    showSunriseSunsetTime(location);
                    break;
                case 4:
                    showWeatherForecast(location);
                    break;
                case 5:
                    // Exit the program
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void showCurrentWeatherConditions(String location) {
        // Method to show current weather conditions for the specified location
        System.out.println("Showing current weather conditions for " + location + "...");
    }

    private static void showBasicWeatherInfo(String location) {
        // Method to show basic weather information for the specified location
        System.out.println("Showing basic weather information for " + location + "...");
    }

    private static void showSunriseSunsetTime(String location) {
        // Method to show sunrise and sunset time for the specified location
        System.out.println("Showing sunrise and sunset time for " + location + "...");
    }

    private static void showWeatherForecast(String location) {
        // Method to show weather forecast for 5 days for the specified location
        System.out.println("Showing weather forecast for 5 days for " + location + "...");
    }
    
private static void clearScreen() {
    for (int i = 0; i < 30; i++) {
        System.out.println();
    }
}

}
 




